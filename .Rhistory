c(
rep("week1", each = 10),
rep("week2", each = 10),
rep("week3", each = 10),
rep("week4", each = 10),
rep("week5", each = 10),
rep("week6", each = 10))
votNS <- rnorm(60, 10, 2)
votNE <- c(
rnorm(10, 60, 2),
rnorm(10, 40, 3),
rnorm(10, 40, 10),
rnorm(10, 30, 7),
rnorm(10, 25, 7),
rnorm(10, 20, 5))
c(votNS, votNE)
votNS <- rnorm(60, 10, 2)
votNE <- c(
rnorm(10, 60, 2),
rnorm(10, 40, 3),
rnorm(10, 40, 10),
rnorm(10, 30, 7),
rnorm(10, 25, 7),
rnorm(10, 20, 5))
vot <- c(votNS, votNE)
group <- c(rep("NS", each = 30), rep("NE", each = 20))
week <- c(
rep("week1", each = 10),
rep("week2", each = 10),
rep("week3", each = 10),
rep("week4", each = 10),
rep("week5", each = 10),
rep("week6", each = 10))
df <- data.frame(group = group, week = week, vot = vot)
c(
rep("week1", each = 10),
rep("week2", each = 10),
rep("week3", each = 10),
rep("week4", each = 10),
rep("week5", each = 10),
rep("week6", each = 10))
rep("week1", each = 10, by = 2)
votNS <- rnorm(60, 10, 2)
votNE <- c(
rnorm(10, 60, 2),
rnorm(10, 40, 3),
rnorm(10, 40, 10),
rnorm(10, 30, 7),
rnorm(10, 25, 7),
rnorm(10, 20, 5))
vot <- c(votNS, votNE)
group <- c(rep("NS", each = 60), rep("NE", each = 60))
weekNS <- c(
rep("week1", each = 10),
rep("week2", each = 10),
rep("week3", each = 10),
rep("week4", each = 10),
rep("week5", each = 10),
rep("week6", each = 10))
weekNE <- c(
rep("week1", each = 10),
rep("week2", each = 10),
rep("week3", each = 10),
rep("week4", each = 10),
rep("week5", each = 10),
rep("week6", each = 10))
week <- c(weekNS, weekNE)
df <- data.frame(group = group, week = week, vot = vot)
df
M <- gvisMotionChart(df, idvar="group", timevar="week")
## Not run:
plot(M)
M <- gvisMotionChart(df, idvar="group", timevar="week")
plot(M)
str(Fruits)
votNS <- rnorm(60, 10, 2)
votNE <- c(
rnorm(10, 60, 2),
rnorm(10, 40, 3),
rnorm(10, 40, 10),
rnorm(10, 30, 7),
rnorm(10, 25, 7),
rnorm(10, 20, 5))
vot <- c(votNS, votNE)
group <- c(rep("NS", each = 60), rep("NE", each = 60))
weekNS <- c(
rep("2015-7-1", each = 10),
rep("2015-7-8", each = 10),
rep("2015-7-15", each = 10),
rep("2015-7-22", each = 10),
rep("2015-7-29", each = 10),
rep("2015-8-5", each = 10))
weekNE <- c(
rep("2015-7-1", each = 10),
rep("2015-7-8", each = 10),
rep("2015-7-15", each = 10),
rep("2015-7-22", each = 10),
rep("2015-7-29", each = 10),
rep("2015-8-5", each = 10))
week <- c(weekNS, weekNE)
df <- data.frame(group = group, week = week, vot = vot)
df
str(df)
df$week <- as.Date(df$week)
str(df)
M <- gvisMotionChart(df, idvar="group", timevar="week")
plot(M)
aggregate(vot ~ week + group, data = df, FUN = mean)
dfMean <- aggregate(vot ~ week + group, data = df, FUN = mean)
M <- gvisMotionChart(dfMean, idvar="group", timevar="week")
plot(M)
dfMean
votNS <- rnorm(60, 10, 2)
votNE <- c(
rnorm(10, 60, 2),
rnorm(10, 40, 3),
rnorm(10, 40, 10),
rnorm(10, 30, 7),
rnorm(10, 20, 7),
rnorm(10, 15, 5))
vot <- c(votNS, votNE)
group <- c(rep("NS", each = 60), rep("NE", each = 60))
weekNS <- c(
rep("2015-7-1", each = 10),
rep("2015-7-8", each = 10),
rep("2015-7-15", each = 10),
rep("2015-7-22", each = 10),
rep("2015-7-29", each = 10),
rep("2015-8-5", each = 10))
weekNE <- c(
rep("2015-7-1", each = 10),
rep("2015-7-8", each = 10),
rep("2015-7-15", each = 10),
rep("2015-7-22", each = 10),
rep("2015-7-29", each = 10),
rep("2015-8-5", each = 10))
week <- c(weekNS, weekNE)
df <- data.frame(group = group, week = week, vot = vot)
df$week <- as.Date(df$week)
dfMean <- aggregate(vot ~ week + group, data = df, FUN = mean)
M <- gvisMotionChart(dfMean, idvar="group", timevar="week")
plot(M)
Line <- gvisLineChart(df)
plot(Line)
?gvisLineChart()
Line <- gvisLineChart(df, week, vot)
plot(Line)
Line <- gvisLineChart(df, xvar = "week", yvar = "vot")
plot(Line)
Line <- gvisLineChart(df, xvar = "week", yvar = "vot", idvar = "group")
plot(Line)
Line <- gvisLineChart(df, xvar = "group", yvar = "vot")
plot(Line)
df
Line <- gvisLineChart(df, xvar = "group", yvar = c(df[df$group == "NE", 3], df[df$group == "NS", 3])
plot(Line)
c(df[df$group == "NE", 3], df[df$group == "NS", 3]
)
Line <- gvisLineChart(df, xvar = "group", yvar = c(df[df$group == "NE", 3], df[df$group == "NS", 3])
)
Line <- gvisLineChart(df, xvar = "group", yvar = c(df[df$group == "NE", 3], df[df$group == "NS", 3]))
plot(Line)
Line <- gvisLineChart(df, xvar = "week", yvar = "vot")
plot(Line)
df <- data.frame(country=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
# line chart
Line1 <- gvisLineChart(df, xvar="country", yvar=c("val1", "val2"))
plot(Line1)
# line chart
Line1 <- gvisLineChart(dfMean, xvar="week", yvar=c("vot"))
plot(Line1)
Line3 <- gvisLineChart(df, xvar="country", yvar=c("val1", "val2"),
options=list(vAxis="{format:'#,###%'}"))
plot(Line3)
Line4 <-  gvisLineChart(df, "country", c("val1","val2"),
options=list(series="[{targetAxisIndex: 0},
{targetAxisIndex:1}]",
vAxes="[{title:'val1'}, {title:'val2'}]"
))
plot(Line4)
Dashed <-  gvisLineChart(df, xvar="country", yvar=c("val1","val2"),
options=list(
series="[{color:'green', targetAxisIndex: 0,
lineWidth: 1, lineDashStyle: [2, 2, 20, 2, 20, 2]},
{color: 'blue',targetAxisIndex: 1,
lineWidth: 2, lineDashStyle: [4, 1]}]",
vAxes="[{title:'val1'}, {title:'val2'}]"
))
plot(Dashed)
Line1 <- gvisLineChart(df, xvar="country", yvar=c("val1", "val2"))
plot(Line1)
Bar <- gvisBarChart(df)
plot(Bar)
Bar2 <- gvisBarChart(dfMean, xvar="group", yvar="vot")
plot(Bar2)
Column2 <- gvisColumnChart(dfMean, xvar="group", yvar="vot")
plot(Column2)
install.packages("rpart.plot")
install.packages("randomForest")
install.packages("rattle")
install.packages("ISLR")
install.packages("quantmod")
?contr.sum
(cT <- contr.treatment(5))
all(crossprod(cT) == diag(4)) # TRUE: even orthonormal
(cT <- contr.treatment(3))
all(crossprod(cT) == diag(2)) # TRUE: even orthonormal
(cT <- contr.treatment(3))
all(crossprod(cT) == diag(3)) # TRUE: even orthonormal
(cT <- contr.treatment(3))
all(crossprod(cT) == diag(2)) # TRUE: even orthonormal
mat = matrix(c(1, -1, 0, 0, 1, 0, 0, -1, 0), ncol = 2)
mat = matrix(c(1, -1, 0, 0, 1, 0, -1, 0), ncol = 2)
mat
mat = matrix(c(1, -1, 0, 1, 0, -1), ncol = 2)
mat
my.contrasts = mat %*% solve(t(mat) %*% mat)my.contrasts
my.contrasts = mat %*% solve(t(mat) %*% mat)
my.contrasts
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
str(vowel.train)
modFit1 <- train(y ~ ., data = vowel.train, method = "rf", prox = TRUE)
modFit1
library(caret)
modFit1 <- train(y ~ ., data = vowel.train, method = "rf", prox = TRUE)
modFit1
set.seed(33833)
modFit1 <- train(y ~ ., data = vowel.train, method = "rf", prox = TRUE)
modFit1
modFit2 <- train(Species ~ ., data = training, method = "gbm", prox = TRUE)
modFit2
modFit2 <- train(Species ~ ., data = vowel.train, method = "gbm", prox = TRUE)
modFit2
modFit2 <- train(y ~ ., data = vowel.train, method = "gbm", prox = TRUE)
modFit2
modFit1$finalModel
modFitRF      <- randomForest(y ~. , data = vowel.train)
modFitRF
predictionsRF <- predict(modFitRF, testing, type = "class")
predictionsRF <- predict(modFitRF, vowel.test, type = "class")
confusionMatrix(predictionsRF, testing$y)
confusionMatrix(predictionsRF, vowel.test$y)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
set.seed(62433)
modFitRF      <- randomForest(diagnosis ~. , data = testing)
predictionsRF <- predict(modFitRF, testing, type = "class")
confusionMatrix(predictionsRF, testing$diagnosis)
mod1 <- train(diagnosis ~ ., method = "glm", data = training)
mod2 <- train(diagnosis ~ ., method = "rf", data = training, trControl = trainControl(method = "cv"), numbers = 3)
mod3 <- train(diagnosis ~ ., method = "lda", data = training, trControl = trainControl(method = "cv"), numbers = 3)
pred1 <- predict(mod1, testing)
pred2 <- predict(mod2, testing)
pred3 <- predict(mod2, testing)
predDF <- data.frame(pred1, pred2, pred3, diagnosis = testing$diagnosis)
combModFit <- train(diagnosis ~ ., method = "rf", data = predDF)
combPred <- predict(combModFit, predDF)
combPred
confusionMatrix(combPred, testing$diagnosis)
pred1
confusionMatrix(pred1, testing$diagnosis)
confusionMatrix(pred2, testing$diagnosis)
confusionMatrix(pred3, testing$diagnosis)
mod1 <- train(diagnosis ~ ., method = "rf", data = training)
mod2 <- train(diagnosis ~ ., method = "gbm", data = training, trControl = trainControl(method = "cv"), numbers = 3)
mod3 <- train(diagnosis ~ ., method = "lda", data = training, trControl = trainControl(method = "cv"), numbers = 3)
pred1 <- predict(mod1, testing)
pred2 <- predict(mod2, testing)
pred3 <- predict(mod2, testing)
predDF <- data.frame(pred1, pred2, pred3, diagnosis = testing$diagnosis)
combModFit <- train(diagnosis ~ ., method = "rf", data = predDF)
combPred <- predict(combModFit, predDF)
confusionMatrix(pred1, testing$diagnosis)
confusionMatrix(pred2, testing$diagnosis)
confusionMatrix(pred3, testing$diagnosis)
confusionMatrix(combPred, testing$diagnosis)
mod1 <- train(diagnosis ~ ., method = "rf", data = training)
mod2 <- train(diagnosis ~ ., method = "gbm", data = training)
mod3 <- train(diagnosis ~ ., method = "lda", data = training)
pred1 <- predict(mod1, testing)
pred2 <- predict(mod2, testing)
pred3 <- predict(mod2, testing)
predDF <- data.frame(pred1, pred2, pred3, diagnosis = testing$diagnosis)
combModFit <- train(diagnosis ~ ., method = "rf", data = predDF)
combPred <- predict(combModFit, predDF)
confusionMatrix(pred1, testing$diagnosis)
confusionMatrix(pred2, testing$diagnosis)
confusionMatrix(pred3, testing$diagnosis)
confusionMatrix(combPred, testing$diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
install.packages("sensR")
install.packages("vowels")
library("tikzDevice", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("phonR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages(c("CORElearn", "digest", "googleVis", "httr", "manipulate", "rattle", "rmarkdown", "rstudioapi"))
library("rmarkdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("hexbin")
cite(lmerTest)
cite("lmerTest")
library("lmerTest", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
cite("lmerTest")
cite(lmerTest)
x <- citation(lmerTest)
toBibtex(x)
citation(lmerTest)
citation()
citation(lme4)
citation(package = lme4)
citation(package = "lme4")
citation("lme4")
citation("")
citation()
n <- 100;
x <- runif(n)
z <- rep(c(0, 1), c(n/2, n/2))
beta0 <- 0;
beta1 <- 2;
tau <- 1;
sigma <- 0.2
y <- beta0 + x * beta1 * tau + rnorm(n, sd = sigma)
plot(x, y, ylab = "Funk Factor", xlab = "Suck Factor")
points(x, y, pch = 16, col = rgb(150, 0, 204, 102, maxColorValue = 255))
abline(lm(y~x), lty = 1, lwd = 2)
install.packages(c("cluster", "CORElearn", "manipulate", "rmarkdown"))
avPlots(lm(prestige~income+education+type, data=Duncan))
library(car)
avPlots(lm(prestige~income+education+type, data=Duncan))
mod <- lm(conformity ~ fcategory*partner.status, data=Moore,
contrasts=list(fcategory=contr.sum, partner.status=contr.sum))
Anova(mod)
m1 <- lm(partic ~ tfr + menwage + womwage + debt + parttime, Bfox)
par(mfrow=c(1,3))
plot(partic ~ womwage, Bfox) # marginal plot, ignoring other predictors
abline(lm(partic ~ womwage, Bfox), col="red", lwd=2)
grid()
avPlots(m1, ~ womwage) # av Plot, adjusting for others
avPlots(m1, ~ womwage, marginal.scale=TRUE) # av Plot, adjusting and scaling as in marginal plot
m1 <- lm(Fertility ~ ., swiss)
betahat.boot <- Boot(m1, R=199) # 199 bootstrap samples--too small to be useful
summary(betahat.boot)  # default summary
confint(betahat.boot)
hist(betahat.boot)
Boxplot(~income, data=Prestige, id.n=Inf) # identify all outliers
Boxplot(income ~ type, data=Prestige)
Boxplot(income ~ type, data=Prestige, at=c(1, 3, 2))
Boxplot(k5 + k618 ~ lfp*wc, data=Mroz)
with(Prestige, Boxplot(income, type, labels=rownames(Prestige)))
ceresPlots(lm(prestige~income+education+type, data=Prestige), terms= ~ . - type)
mod1 <- lm(prestige ~ income + education, data=Duncan)
mod2 <- update(mod1, subset=-c(6,16))
mod3 <- update(mod1, . ~ . + type)
compareCoefs(mod1)
compareCoefs(mod1, mod2)
compareCoefs(mod1, mod2, mod3)
with(Prestige, dataEllipse(income, education, type, id.n=2, pch=15:17,
labels=rownames(Prestige), xlim=c(0, 25000), center.pch="+",
group.labels=c("Blue Collar", "Professional", "White Collar"),
ylim=c(5, 20), level=.95, fill=TRUE, fill.alpha=0.1))
with(Duncan, {
dataEllipse(income, prestige, levels=0.68)
dataEllipse(income, prestige, levels=0.68, robust=TRUE, plot.points=FALSE, col="green3")
dataEllipse(income, prestige, weights=wts, levels=0.68, plot.points=FALSE, col="brown")
dataEllipse(income, prestige, weights=wts, robust=TRUE, levels=0.68,
plot.points=FALSE, col="blue")
})
confidenceEllipse(lm(prestige~income+education, data=Duncan),
L=c("income + education", "income - education"))
y <- rbinom(100, 1, p)
scatterplot(y ~ x, smoother=gamLine, smoother.args=list(family=binomial))
scatterplot(prestige ~ income, data=Prestige)
scatterplot(prestige ~ income, data=Prestige, smoother=gamLine)
scatterplot(prestige ~ income, data=Prestige, smoother=quantregLine)
scatterplot(prestige ~ income, data=Prestige, smoother=gamLine)
scatterplot(prestige ~ income, data=Prestige, smoother=quantregLine)
scatterplot(prestige ~ income | type, data=Prestige, smoother=quantregLine)
scatterplot(prestige ~ income | type, data=Prestige, spread=TRUE)
w <- 1 + rpois(100, 5)
x <- rnorm(100)
p <- 1/(1 + exp(-(x + 0.5*x^2)))
s <- rbinom(100, w, p)
scatterplot(s/w ~ x, smoother=gamLine,
smoother.args=list(family="binomial", weights=w))
y <- rbinom(100, 1, p)
scatterplot(y ~ x, smoother=gamLine, smoother.args=list(family=binomial))
y
x
install.packages(c("car", "manipulate", "maptools", "rpart.plot"))
install.packages("car")
install.packages("manipulate")
install.packages("maptools")
install.packages("rpart.plot")
install.packages(c("boot", "BradleyTerry2", "class", "KernSmooth", "manipulate", "mboost", "nnet", "rpart", "shiny", "spatial"))
install.packages(c("boot", "BradleyTerry2", "class", "KernSmooth",
install.packages(c("boot", "BradleyTerry2"))
)
install.packages("boot")
install.packages("BradleyTerry2")
install.packages(c("class", "KernSmooth"))
install.packages(c("manipulate", "mboost"))
install.packages("nnet")
install.packages("nnet")
install.packages(c("rpart", "shiny", "spatial"))
install.packages(c("car", "colorspace", "foreign", "Hmisc", "lattice", "manipulate", "MASS", "mgcv", "multcomp", "MuMIn", "nlme", "phonR", "Rcpp", "RcppEigen", "rms", "shinythemes", "survival"))
install.packages("tcltk2")
library(ggplot2)
library(tcltk2)
library("acepack", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("manipulate")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("ggplot2")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("tcltk")
install.packages("tcltk2")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("manipulate")
library(ggplot2)
install.packages("manipulate")
library(ggplot2)
library(ggplot2)
install.packages("manipulate")
library(ggplot2)
library(tcltk)
install.packages("tcltk")
capabilities("tcltk")
system("ls -ld /usr/local /usr/local/lib /usr/local/lib/libtcl*")
library(ggplot2)
library(ggplot2)
library(ggplot2)
install.packages(c("manipulate", "MASS"))
install.packages(c("codetools", "jsonlite", "manipulate", "MASS", "mgcv"))
install.packages(c("formatR", "highr", "manipulate", "mime", "pscl", "sandwich"))
demo(dplyr)
demo('dplyr')
require(dplyr)
demo()
demo('dplyr')
demo(dplyr)
demo(graphics)
demo(image)
demo(glm.vr)
demo(nlm)
install.packages("tidyr")
install.packages("htmlwidgets")
install.packages("threejs")
devtools::install_github("bwlewis/rthreejs")
setwd("~/academia/teaching/workshops/psychopy_ws")
library(slidify)
slidify("index.Rmd")
setwd("~/academia/teaching/workshops/psychopy_ws")
slidify("index.Rmd")
devtools::install_github("rstudio/DT")
install.packages("htmlwidgets")
library(DT)
datatable(iris)
if (!require("DT")) devtools::install_github("rstudio/DT")
sessionInfo()
devtools::install_github('rstudio/DT')
devtools::install_github('ramnathv/htmlwidgets')
devtools::install_github('rstudio/DT')
library(threejs)
# Plot flights to frequent destinations from
# Callum Prentice's global flight data set,
# http://callumprentice.github.io/apps/flight_stream/index.html
data(flights)
# Approximate locations as factors
dest   <- factor(sprintf("\%.2f:\%.2f",flights[,3], flights[,4]))
# A table of destination frequencies
freq <- sort(table(dest), decreasing=TRUE)
# The most frequent destinations in these data, possibly hub airports?
frequent_destinations <- names(freq)[1:10]
# Subset the flight data by destination frequency
idx <- dest \%in\% frequent_destinations
frequent_flights <- flights[idx, ]
# Lat/long of frequent destinations
latlong <- unique(frequent_flights[,3:4])
# Plot frequent destinations as bars, and the flights to and from
# them as arcs. Adjust arc width and color by frequency.
earth <- system.file("images/world.jpg",  package="threejs")
globejs(img=earth, lat=latlong[,1], long=latlong[,2], arcs=frequent_flights,
arcsHeight=0.3, arcsLwd=2, arcsColor="#ffff00", arcsOpacity=0.15,
atmosphere=TRUE)
devtools::install_github('rich-iannone/DiagrammeR')
