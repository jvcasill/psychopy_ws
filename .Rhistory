install.packages("data.table")
install.packages("psyphy")
install.packages("kernlab")
install.packages("caret")
install.packages("e1071")
install.packages("ISLR")
install.packages("splines")
install.packages("RANN")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
str(concrete)
str(mixtures)
featurePlot(x = training[, c("age", "education", "jobclass")],
y = training$CompressiveStrength, plot = "pairs")
featurePlot(x = training[, ],
y = training$CompressiveStrength, plot = "pairs")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$SuperPlasticizer, main = "", xlab = "ave. capital run length")
hist(training$SuperPlasticizer, main = "")
str(training)
hist(training$Superplasticizer, main = "")
summary(training)
hist(log(training$Superplasticizer) + 1, main = "")
hist(log(training$Superplasticizer), main = "")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
hist(training$Superplasticizer), main = "")
hist(training$Superplasticizer, main = "")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer, main = "")
setwd("~/academia/teaching/workshops/psychopy_ws")
library(slidify)
slidify("psychopy2_ws.Rmd")
slidify("psychopy2_ws.Rmd")
publish(user = "jvcasill", repo = "psychopy_ws")
packrat::init()
packrat::disable()
library(slidify)
library(slidify)
library(slidify)
setwd("~/academia/teaching/workshops/psychopy_ws")
slidify('index.Rmd')
slidify('psychopy2_ws.Rmd')
